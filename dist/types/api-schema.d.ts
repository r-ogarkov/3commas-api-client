/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/ver1/bots/account_trade_info_smart_sell": {
        /** Smart Sell Account Table Info (Permission: NONE, Security: SIGNED) */
        get: operations["getVer1BotsAccountTradeInfoSmartSell"];
    };
    "/ver1/bots/account_trade_info": {
        /** Account Trade Info (Permission: NONE, Security: SIGNED) */
        get: operations["getVer1BotsAccountTradeInfo"];
    };
    "/ver1/bots/strategy_list": {
        /** Available strategy list for bot (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1BotsStrategyList"];
    };
    "/ver1/bots/pairs_black_list": {
        /** Black List for bot pairs (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1BotsPairsBlackList"];
    };
    "/ver1/bots/update_pairs_black_list": {
        /** Create or Update pairs BlackList for bots (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsUpdatePairsBlackList"];
    };
    "/ver1/bots/create_bot": {
        /** Create bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsCreateBot"];
    };
    "/ver1/bots": {
        /** User bots (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1Bots"];
    };
    "/ver1/bots/stats": {
        /** Get bot stats (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1BotsStats"];
    };
    "/ver1/bots/{bot_id}/copy_and_create": {
        /** POST /bots/:id/copy_and_create. Permission: BOTS_WRITE, Security: SIGNED */
        post: operations["postVer1BotsBotIdCopyAndCreate"];
    };
    "/ver1/bots/{bot_id}/update": {
        /** Edit bot (Permission: BOTS_WRITE, Security: SIGNED) */
        patch: operations["patchVer1BotsBotIdUpdate"];
    };
    "/ver1/bots/{bot_id}/disable": {
        /** Disable bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsBotIdDisable"];
    };
    "/ver1/bots/{bot_id}/enable": {
        /** Enable bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsBotIdEnable"];
    };
    "/ver1/bots/{bot_id}/start_new_deal": {
        /** Start new deal asap (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsBotIdStartNewDeal"];
    };
    "/ver1/bots/{bot_id}/delete": {
        /** Delete bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsBotIdDelete"];
    };
    "/ver1/bots/{bot_id}/panic_sell_all_deals": {
        /** Panic sell all bot deals (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsBotIdPanicSellAllDeals"];
    };
    "/ver1/bots/{bot_id}/cancel_all_deals": {
        /** Cancel all bot deals (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1BotsBotIdCancelAllDeals"];
    };
    "/ver1/bots/{bot_id}/deals_stats": {
        /** Bot deals stats (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1BotsBotIdDealsStats"];
    };
    "/ver1/bots/{bot_id}/show": {
        /** Bot info (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1BotsBotIdShow"];
    };
    "/ver1/deals": {
        /** User deals (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1Deals"];
    };
    "/ver1/deals/{deal_id}/convert_to_smart_trade": {
        /** Convert to smart trade (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postVer1DealsDealIdConvertToSmartTrade"];
    };
    "/ver1/deals/{deal_id}/update_max_safety_orders": {
        /** Update max safety orders (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1DealsDealIdUpdateMaxSafetyOrders"];
    };
    "/ver1/deals/{deal_id}/panic_sell": {
        /** Panic sell deal (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1DealsDealIdPanicSell"];
    };
    "/ver1/deals/{deal_id}/cancel": {
        /** Cancel deal (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1DealsDealIdCancel"];
    };
    "/ver1/deals/{deal_id}/update_deal": {
        /** Update deal (Permission: BOTS_WRITE, Security: SIGNED) */
        patch: operations["patchVer1DealsDealIdUpdateDeal"];
    };
    "/ver1/deals/{deal_id}/update_tp": {
        /** DEPRECATED, Update take profit condition. Deal status should be bought (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1DealsDealIdUpdateTp"];
    };
    "/ver1/deals/{deal_id}/show": {
        /** Info about specific deal (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1DealsDealIdShow"];
    };
    "/ver1/deals/{deal_id}/cancel_order": {
        /** Cancel manual safety orders (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1DealsDealIdCancelOrder"];
    };
    "/ver1/deals/{deal_id}/market_orders": {
        /** Deal safety orders (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1DealsDealIdMarketOrders"];
    };
    "/ver1/deals/{deal_id}/add_funds": {
        /** Adding manual safety order (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1DealsDealIdAddFunds"];
    };
    "/ver1/deals/{deal_id}/data_for_adding_funds": {
        /** Info required to add funds correctly: available amounts, exchange limitations etc  (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1DealsDealIdDataForAddingFunds"];
    };
    "/ver1/users/current_mode": {
        /** Current User Mode (Paper or Real) (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1UsersCurrentMode"];
    };
    "/ver1/users/change_mode": {
        /** Change User Mode (Paper or Real) (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1UsersChangeMode"];
    };
    "/ver1/accounts/transfer": {
        /** Transfer coins between accounts (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1AccountsTransfer"];
    };
    "/ver1/accounts/transfer_history": {
        /** Transfers history (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1AccountsTransferHistory"];
    };
    "/ver1/accounts/transfer_data": {
        /** Data for transfer between accounts (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1AccountsTransferData"];
    };
    "/ver1/accounts/new": {
        /** Add exchange account  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1AccountsNew"];
    };
    "/ver1/accounts/update": {
        /** Edit exchange account */
        post: operations["postVer1AccountsUpdate"];
    };
    "/ver1/accounts": {
        /** User connected exchanges(and EthereumWallet) list (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1Accounts"];
    };
    "/ver1/accounts/market_list": {
        /** Supported markets list (Permission: NONE, Security: NONE) */
        get: operations["getVer1AccountsMarketList"];
    };
    "/ver1/accounts/market_pairs": {
        /** All market pairs (Permission: NONE, Security: NONE) */
        get: operations["getVer1AccountsMarketPairs"];
    };
    "/ver1/accounts/currency_rates_with_leverage_data": {
        /** Currency rates and limits with leverage data (Permission: NONE, Security: NONE) */
        get: operations["getVer1AccountsCurrencyRatesWithLeverageData"];
    };
    "/ver1/accounts/currency_rates": {
        /** Currency rates and limits (Permission: NONE, Security: NONE) */
        get: operations["getVer1AccountsCurrencyRates"];
    };
    "/ver1/accounts/{account_id}/deposit_data": {
        /** User Deposit Data (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1AccountsAccountIdDepositData"];
    };
    "/ver1/accounts/{account_id}/networks_info": {
        /** Deposit/withdraw networks info (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1AccountsAccountIdNetworksInfo"];
    };
    "/ver1/accounts/{account_id}/convert_dust_to_bnb": {
        /** Convert dust coins to BNB (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdConvertDustToBnb"];
    };
    "/ver1/accounts/{account_id}/active_trading_entities": {
        /** Active trade entities (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1AccountsAccountIdActiveTradingEntities"];
    };
    "/ver1/accounts/{account_id}/sell_all_to_usd": {
        /** Sell all to USD  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdSellAllToUsd"];
    };
    "/ver1/accounts/{account_id}/sell_all_to_btc": {
        /** Sell all to BTC  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdSellAllToBtc"];
    };
    "/ver1/accounts/{account_id}/balance_chart_data": {
        /** balance history data (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1AccountsAccountIdBalanceChartData"];
    };
    "/ver1/accounts/{account_id}/load_balances": {
        /** Load balances for specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdLoadBalances"];
    };
    "/ver1/accounts/{account_id}/rename": {
        /** Rename exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdRename"];
    };
    "/ver1/accounts/{account_id}/pie_chart_data": {
        /** Information about all user balances on specified exchange in pretty for pie chart format (Permission: ACCOUNTS_READ, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdPieChartData"];
    };
    "/ver1/accounts/{account_id}/account_table_data": {
        /** Information about all user balances on specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdAccountTableData"];
    };
    "/ver1/accounts/{account_id}/remove": {
        /** Remove exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1AccountsAccountIdRemove"];
    };
    "/ver1/accounts/{account_id}/leverage_data": {
        /** Information about account leverage (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1AccountsAccountIdLeverageData"];
    };
    "/ver1/accounts/{account_id}": {
        /**
         * Single Account Info (Permission: ACCOUNTS_READ, Security: SIGNED)
         * You can send 'summary' instead of {account_id} to get summary account info
         */
        get: operations["getVer1AccountsAccountId"];
    };
    "/ver1/marketplace/presets": {
        /** Marketplace presets (Permission: NONE, Security: SIGNED) */
        get: operations["getVer1MarketplacePresets"];
    };
    "/ver1/marketplace/items": {
        /** All marketplace items (Permission: NONE, Security: NONE) */
        get: operations["getVer1MarketplaceItems"];
    };
    "/ver1/marketplace/{item_id}/signals": {
        /** Marketplace Item Signals (Permission: NONE, Security: NONE) */
        get: operations["getVer1MarketplaceItemIdSignals"];
    };
    "/ver1/grid_bots/ai": {
        /** Create AI Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1GridBotsAi"];
    };
    "/ver1/grid_bots/manual": {
        /** Create Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1GridBotsManual"];
    };
    "/ver1/grid_bots/ai_settings": {
        /** Get AI settings (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1GridBotsAiSettings"];
    };
    "/ver1/grid_bots": {
        /** Grid bots list (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1GridBots"];
    };
    "/ver1/grid_bots/{id}/market_orders": {
        /** Grid Bot Market Orders (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1GridBotsIdMarketOrders"];
    };
    "/ver1/grid_bots/{id}/profits": {
        /** Grid Bot Profits (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1GridBotsIdProfits"];
    };
    "/ver1/grid_bots/{id}/ai": {
        /** Edit Grid Bot (AI) (Permission: BOTS_WRITE, Security: SIGNED) */
        patch: operations["patchVer1GridBotsIdAi"];
    };
    "/ver1/grid_bots/{id}/manual": {
        /** Edit Grid Bot (Manual) (Permission: BOTS_WRITE, Security: SIGNED) */
        patch: operations["patchVer1GridBotsIdManual"];
    };
    "/ver1/grid_bots/{id}": {
        /** Show Grid Bot (Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1GridBotsId"];
        /** Delete Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
        delete: operations["deleteVer1GridBotsId"];
    };
    "/ver1/grid_bots/{id}/disable": {
        /** Disable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1GridBotsIdDisable"];
    };
    "/ver1/grid_bots/{id}/enable": {
        /** Enable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
        post: operations["postVer1GridBotsIdEnable"];
    };
    "/ver1/grid_bots/{id}/required_balances": {
        /** Get required balances to start bot(Permission: BOTS_READ, Security: SIGNED) */
        get: operations["getVer1GridBotsIdRequiredBalances"];
    };
    "/ver1/loose_accounts": {
        /** Create Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        post: operations["postVer1LooseAccounts"];
    };
    "/ver1/loose_accounts/available_currencies": {
        /** Available currencies (Permission: ACCOUNTS_READ, Security: SIGNED) */
        get: operations["getVer1LooseAccountsAvailableCurrencies"];
    };
    "/ver1/loose_accounts/{account_id}": {
        /** Update Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
        put: operations["putVer1LooseAccountsAccountId"];
    };
    "/ver1/ping": {
        /** Test connectivity to the Rest API (Permission: NONE, Security: NONE) */
        get: operations["getVer1Ping"];
    };
    "/ver1/time": {
        /** Test connectivity to the Rest API and get the current server time (Permission: NONE, Security: NONE) */
        get: operations["getVer1Time"];
    };
    "/v2/smart_trades": {
        /** Get smart trade history (Permission: SMART_TRADE_READ, Security: SIGNED) */
        get: operations["getV2SmartTrades"];
        /** Create smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTrades"];
    };
    "/v2/smart_trades/{id}": {
        /** Get smart trade v2 by id (Permission: SMART_TRADE_READ, Security: SIGNED) */
        get: operations["getV2SmartTradesId"];
        /** Cancel smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        delete: operations["deleteV2SmartTradesId"];
        /** Update smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        patch: operations["patchV2SmartTradesId"];
    };
    "/v2/smart_trades/{id}/reduce_funds": {
        /** Reduce funds for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTradesIdReduceFunds"];
    };
    "/v2/smart_trades/{id}/add_funds": {
        /** Average for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTradesIdAddFunds"];
    };
    "/v2/smart_trades/{id}/close_by_market": {
        /** Close by market smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTradesIdCloseByMarket"];
    };
    "/v2/smart_trades/{id}/force_start": {
        /** Force start smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTradesIdForceStart"];
    };
    "/v2/smart_trades/{id}/force_process": {
        /** Process smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTradesIdForceProcess"];
    };
    "/v2/smart_trades/{id}/set_note": {
        /** Set note to smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTradesIdSetNote"];
    };
    "/v2/smart_trades/{smart_trade_id}/trades": {
        /** Get smart trade v2 trades (Permission: SMART_TRADE_READ, Security: SIGNED) */
        get: operations["getV2SmartTradesSmartTradeIdTrades"];
    };
    "/v2/smart_trades/{smart_trade_id}/trades/{id}/close_by_market": {
        /** Panic close trade by market (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        post: operations["postV2SmartTradesSmartTradeIdTradesIdCloseByMarket"];
    };
    "/v2/smart_trades/{smart_trade_id}/trades/{id}": {
        /** Cancel trade (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
        delete: operations["deleteV2SmartTradesSmartTradeIdTradesId"];
    };
}
export interface definitions {
    /** Marketplace presets (Permission: NONE, Security: SIGNED) */
    IndexEntity: {
        bots?: definitions["MarketplaceBotEntity"][];
        total?: number;
        page?: number;
    };
    MarketplaceBotEntity: {
        id?: number;
        type?: string;
        name?: string;
        strategy?: string;
        secret?: string;
        marketplace_item?: definitions["MarketplaceItem"];
        profit?: definitions["Profit"];
        currencies?: string[];
        /** Bot's copies count */
        copies?: number;
        is_favorite?: boolean;
    };
    MarketplaceItem: {
        id?: number;
        name?: string;
        icon_url?: string;
    };
    Profit: {
        period?: string;
        amount?: number;
        chart_data?: number[];
    };
    /** Grid Bot Profits (Permission: BOTS_READ, Security: SIGNED) */
    GridBotProfitsEntity: {
        grid_line_id?: number;
        profit?: string;
        usd_profit?: string;
        created_at?: string;
        grid_line?: definitions["GridLineEntity"];
    };
    GridLineEntity: {
        /** Uniq id */
        id?: number;
        price?: string;
        side?: string;
        order_placed?: boolean;
    };
    /** Test connectivity to the Rest API (Permission: NONE, Security: NONE) */
    PongEntity: {
        pong?: string;
    };
    /** Test connectivity to the Rest API and get the current server time (Permission: NONE, Security: NONE) */
    TimeEntity: {
        /** UNIX timestamp */
        server_time?: number;
    };
    BotEntity: {
        id?: number;
        account_id?: number;
        is_enabled?: boolean;
        max_safety_orders?: number;
        active_safety_orders_count?: number;
        /** Format: [QUOTE_BASE, ...] */
        pairs?: string;
        strategy_list?: string;
        max_active_deals?: number;
        active_deals_count?: number;
        "deletable?"?: boolean;
        created_at?: string;
        updated_at?: string;
        trailing_enabled?: boolean;
        tsl_enabled?: boolean;
        /** Deal start delay in seconds */
        deal_start_delay_seconds?: number;
        stop_loss_timeout_enabled?: boolean;
        stop_loss_timeout_in_seconds?: number;
        disable_after_deals_count?: number;
        deals_counter?: number;
        allowed_deals_on_same_pair?: number;
        easy_form_supported?: boolean;
        /** Close bot deals after given number of seconds */
        close_deals_timeout?: number;
        url_secret?: string;
        name?: string;
        /** 'Percentage' */
        take_profit?: string;
        base_order_volume?: string;
        safety_order_volume?: string;
        safety_order_step_percentage?: string;
        /** Values: base, total */
        take_profit_type?: string;
        /** Values: ["Bot::MultiBot", "Bot::SingleBot", "Bot::SwitchBot"] */
        type?: string;
        martingale_volume_coefficient?: string;
        martingale_step_coefficient?: string;
        stop_loss_percentage?: string;
        cooldown?: string;
        btc_price_limit?: string;
        /** Values: long, short */
        strategy?: string;
        min_volume_btc_24h?: string;
        /** Values: quote_currency, base_currency */
        profit_currency?: string;
        min_price?: string;
        max_price?: string;
        /** Values: stop_loss, stop_loss_and_disable_bot */
        stop_loss_type?: string;
        /** Values: quote_currency, base_currency, percent, xbt */
        safety_order_volume_type?: string;
        /** Values: quote_currency, base_currency, percent, xbt */
        base_order_volume_type?: string;
        account_name?: string;
        trailing_deviation?: string;
        finished_deals_profit_usd?: string;
        finished_deals_count?: string;
        /** Values: cross, not_specified, isolated */
        leverage_type?: string;
        leverage_custom_value?: string;
        /** Values: limit, market */
        start_order_type?: string;
        /** Sum of active deals profits */
        active_deals_usd_profit?: string;
    };
    AccountEntity: {
        id?: number;
        auto_balance_period?: number;
        auto_balance_portfolio_id?: number;
        auto_balance_portfolio?: definitions["PortfolioEntity"];
        auto_balance_currency_change_limit?: number;
        autobalance_enabled?: boolean;
        hedge_mode_available?: boolean;
        hedge_mode_enabled?: boolean;
        is_locked?: boolean;
        smart_trading_supported?: boolean;
        /** DEPRECATED. use smart_trading_supported instead */
        smart_selling_supported?: boolean;
        available_for_trading?: boolean;
        stats_supported?: boolean;
        trading_supported?: boolean;
        market_buy_supported?: boolean;
        market_sell_supported?: boolean;
        conditional_buy_supported?: boolean;
        bots_allowed?: boolean;
        bots_ttp_allowed?: boolean;
        bots_tsl_allowed?: boolean;
        gordon_bots_available?: boolean;
        multi_bots_allowed?: boolean;
        created_at?: string;
        updated_at?: string;
        last_auto_balance?: string;
        /** Sell all to USD/BTC possibility */
        fast_convert_available?: boolean;
        grid_bots_allowed?: boolean;
        api_key_invalid?: boolean;
        deposit_enabled?: boolean;
        supported_market_types?: string;
        api_key?: string;
        name?: string;
        /** Values: time, currency_change */
        auto_balance_method?: number;
        auto_balance_error?: string;
        customer_id?: string;
        subaccount_name?: string;
        lock_reason?: string;
        btc_amount?: string;
        usd_amount?: string;
        day_profit_btc?: string;
        day_profit_usd?: string;
        day_profit_btc_percentage?: string;
        day_profit_usd_percentage?: string;
        /** Month period */
        btc_profit?: string;
        /** Month period */
        usd_profit?: string;
        /** Month period */
        usd_profit_percentage?: string;
        /** Month period */
        btc_profit_percentage?: string;
        total_btc_profit?: string;
        total_usd_profit?: string;
        pretty_display_type?: string;
        exchange_name?: string;
        market_code?: string;
        address?: string;
    };
    PortfolioEntity: {
        name?: string;
        id?: string;
        created_at?: string;
        portfolio_entries?: definitions["PortfolioEntryEntity"];
    };
    PortfolioEntryEntity: {
        target_percentage?: string;
        currency_code?: string;
    };
    GridBotEntity: {
        id?: number;
        account_id?: number;
        account_name?: string;
        is_enabled?: boolean;
        grids_quantity?: string;
        created_at?: string;
        updated_at?: string;
        strategy_type?: string;
        upper_stop_loss_enabled?: boolean;
        lower_stop_loss_enabled?: boolean;
        lower_price?: string;
        lower_stop_loss_price?: string;
        lower_stop_loss_action?: string;
        upper_price?: string;
        upper_stop_loss_price?: string;
        upper_stop_loss_action?: string;
        quantity_per_grid?: string;
        leverage_type?: string;
        leverage_custom_value?: string;
        name?: string;
        pair?: string;
        start_price?: string;
        grid_price_step?: string;
        current_profit?: string;
        current_profit_usd?: string;
        total_profits_count?: string;
        bought_volume?: string;
        sold_volume?: string;
        profit_percentage?: string;
        current_price?: string;
        investment_base_currency?: string;
        investment_quote_currency?: string;
        grid_lines?: definitions["GridLineEntity"];
    };
    DealEntity: {
        id?: number;
        type?: string | null;
        bot_id?: number;
        max_safety_orders?: number;
        deal_has_error?: boolean;
        /** DEPRECATED */
        from_currency_id?: number;
        /** DEPRECATED */
        to_currency_id?: number;
        account_id?: number;
        active_safety_orders_count?: number;
        created_at?: string;
        updated_at?: string;
        closed_at?: string | null;
        "finished?"?: boolean;
        current_active_safety_orders_count?: number;
        /** DEPRECATED */
        current_active_safety_orders?: number;
        /** completed safeties (not including manual) */
        completed_safety_orders_count?: number;
        /** completed manual safeties */
        completed_manual_safety_orders_count?: number;
        "cancellable?"?: boolean;
        "panic_sellable?"?: boolean;
        trailing_enabled?: boolean | null;
        tsl_enabled?: boolean;
        stop_loss_timeout_enabled?: boolean;
        stop_loss_timeout_in_seconds?: number;
        active_manual_safety_orders?: number;
        /** Format: QUOTE_BASE */
        pair?: string;
        /** Values: created, base_order_placed, bought, cancelled, completed, failed, panic_sell_pending, panic_sell_order_placed, panic_sold, cancel_pending, stop_loss_pending, stop_loss_finished, stop_loss_order_placed, switched, switched_take_profit, ttp_activated, ttp_order_placed, liquidated, bought_safety_pending, bought_take_profit_pending, settled */
        status?: string;
        localized_status?: string;
        /** Percentage */
        take_profit?: string | null;
        base_order_volume?: string | null;
        safety_order_volume?: string | null;
        safety_order_step_percentage?: string;
        leverage_type?: string;
        leverage_custom_value?: string | null;
        bought_amount?: string | null;
        bought_volume?: string | null;
        bought_average_price?: string;
        base_order_average_price?: string | null;
        sold_amount?: string | null;
        sold_volume?: string | null;
        sold_average_price?: string | null;
        /** Values: base, total */
        take_profit_type?: string;
        final_profit?: string;
        /** Percentage */
        martingale_coefficient?: string;
        /** Percentage */
        martingale_volume_coefficient?: string;
        /** Percentage */
        martingale_step_coefficient?: string;
        stop_loss_percentage?: string | null;
        error_message?: string | null;
        /** Values: quote_currency, base_currency */
        profit_currency?: string;
        /** Values: stop_loss, stop_loss_and_disable_bot */
        stop_loss_type?: string;
        /** Values: quote_currency, base_currency, percent, xbt */
        safety_order_volume_type?: string;
        /** Values: quote_currency, base_currency, percent, xbt */
        base_order_volume_type?: string;
        from_currency?: string;
        to_currency?: string;
        current_price?: string;
        take_profit_price?: string;
        stop_loss_price?: string | null;
        final_profit_percentage?: string;
        actual_profit_percentage?: string;
        bot_name?: string;
        account_name?: string;
        usd_final_profit?: string;
        actual_profit?: string;
        actual_usd_profit?: string;
        failed_message?: string | null;
        reserved_base_coin?: string;
        reserved_second_coin?: string;
        trailing_deviation?: string | null;
        /** Highest price met in case of long deal, lowest price otherwise */
        trailing_max_price?: string | null;
        /** Highest price met in TSL in case of long deal, lowest price otherwise */
        tsl_max_price?: string | null;
        /** short or long */
        strategy?: string;
        /** Sum of reserved in active deals funds in QUOTE */
        reserved_quote_funds?: number | null;
        /** Sum of reserved in active deals funds in BASE */
        reserved_base_funds?: number | null;
    };
    SmartTradeV2Entity: {
        id?: number;
        version?: number;
        account?: {
            id?: number;
            type?: string;
            name?: string;
            market?: string;
            link?: string;
        };
        pair?: string;
        instant?: boolean;
        status?: {
            type?: string;
            title?: string;
        };
        leverage?: {
            enabled?: boolean;
            type?: string;
            value?: number;
        };
        position?: {
            type?: string;
            editable?: boolean;
            units?: {
                value?: string | null;
                editable?: boolean;
            };
            price?: {
                value?: number | null;
                value_without_commission?: number | null;
                editable?: boolean;
            };
            total?: {
                value?: number | null;
            };
            order_type?: string;
            status?: {
                type?: string;
                title?: string;
            };
        };
        take_profit?: {
            enabled?: boolean;
            steps?: definitions["TakeProfitStep"][];
        };
        stop_loss?: {
            enabled?: boolean;
        };
        reduce_funds?: {
            steps?: definitions["ReduceFundsStep"][];
        };
        market_close?: {
            id?: number;
            type?: string;
            status?: {
                type?: string;
                title?: string;
                basic_type?: string;
            };
            units?: {
                value?: string;
            };
            price?: {
                value?: string;
                value_without_commission?: string;
            };
            total?: {
                value?: string;
            };
            filled?: {
                units?: string;
                total?: string;
                price?: string;
                value?: string;
            };
        };
        note?: string;
        note_raw?: string | null;
        skip_enter_step?: boolean;
        data?: {
            editable?: boolean;
            current_price?: {
                quote_volume?: string;
                last?: string;
            };
            target_price_type?: string;
            base_order_finished?: boolean;
            missing_funds_to_close?: number;
            liquidation_price?: number | null;
            average_enter_price?: number | null;
            average_close_price?: number | null;
            average_enter_price_without_commission?: number | null;
            average_close_price_without_commission?: number | null;
            panic_sell_available?: boolean;
            add_funds_available?: boolean;
            force_start_available?: boolean;
            force_process_available?: boolean;
            cancel_available?: boolean;
            finished?: boolean;
            base_position_step_finished?: boolean;
            created_at?: string;
            updated_at?: string;
            closed_at?: string;
            type?: string;
        };
        profit?: {
            volume?: number | null;
            usd?: number | null;
            percent?: number;
            roe?: number | null;
        };
        margin?: {
            amount?: number | null;
            total?: number | null;
        };
        is_position_not_filled?: boolean;
    };
    TakeProfitStep: {
        id?: number;
        version?: number;
        account?: {
            id?: number;
            type?: string;
            name?: string;
            market?: string;
            link?: string;
        };
        pair?: string;
        instant?: boolean;
        status?: {
            type?: string;
            title?: string;
        };
        leverage?: {
            enabled?: boolean;
            type?: string;
            value?: number;
        };
        position?: {
            type?: string;
            editable?: boolean;
            units?: {
                value?: string | null;
                editable?: boolean;
            };
            price?: {
                value?: number | null;
                value_without_commission?: number | null;
                editable?: boolean;
            };
            total?: {
                value?: number | null;
            };
            order_type?: string;
            status?: {
                type?: string;
                title?: string;
            };
        };
        take_profit?: {
            enabled?: boolean;
            steps?: definitions["TakeProfitStep"][];
        };
        stop_loss?: {
            enabled?: boolean;
        };
        note?: string;
        skip_enter_step?: boolean;
        data?: {
            editable?: boolean;
            current_price?: {
                quote_volume?: string;
                last?: string;
            };
            target_price_type?: string;
            base_order_finished?: boolean;
            missing_funds_to_close?: number;
            liquidation_price?: number | null;
            average_enter_price?: number | null;
            average_close_price?: number | null;
            average_enter_price_without_commission?: number | null;
            average_close_price_without_commission?: number | null;
            panic_sell_available?: boolean;
            add_funds_available?: boolean;
            force_start_available?: boolean;
            force_process_available?: boolean;
            cancel_available?: boolean;
            finished?: boolean;
            base_position_step_finished?: boolean;
            created_at?: string;
            updated_at?: string;
            closed_at?: string;
            type?: string;
        };
        profit?: {
            volume?: number | null;
            usd?: number | null;
            percent?: number;
            roe?: number | null;
        };
        margin?: {
            amount?: number | null;
            total?: number | null;
        };
        is_position_not_filled?: boolean;
    };
    BotDealsStatsEntity: {
        completed?: number;
        panic_sold?: number;
        active?: number;
        completed_deals_usd_profit?: string;
        from_currency_is_dollars?: boolean;
        completed_deals_btc_profit?: string;
        funds_locked_in_active_deals?: string;
        btc_funds_locked_in_active_deals?: string;
        active_deals_usd_profit?: string;
        active_deals_btc_profit?: string;
    };
    LooseAccountEntity: {
        id?: number;
        name?: string;
        created_at?: string;
        updated_at?: string;
        type?: string;
        is_deleted?: boolean;
        is_locked?: boolean;
    };
    ReduceFundsStep: {
        id?: number;
        type?: string;
        status?: {
            type?: string;
            title?: string;
            basic_type?: string;
        };
        units?: {
            value?: string;
        };
        price?: {
            value?: string;
            value_without_commission?: string;
        };
        total?: {
            value?: string;
        };
        filled?: {
            units?: string;
            total?: string;
            price?: string;
            value?: string;
        };
        data?: {
            cancelable?: boolean;
            panic_sell_available?: boolean;
        };
    };
}
export interface operations {
    /** Smart Sell Account Table Info (Permission: NONE, Security: SIGNED) */
    getVer1BotsAccountTradeInfoSmartSell: {
        parameters: {
            query: {
                account_id: number;
            };
        };
        responses: {
            /** Smart Sell Account Table Info (Permission: NONE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Account Trade Info (Permission: NONE, Security: SIGNED) */
    getVer1BotsAccountTradeInfo: {
        parameters: {
            query: {
                account_id: number;
            };
        };
        responses: {
            /** Account Trade Info (Permission: NONE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Available strategy list for bot (Permission: BOTS_READ, Security: SIGNED) */
    getVer1BotsStrategyList: {
        parameters: {
            query: {
                /** id from GET /ver1/accounts */
                account_id?: number;
                type?: "simple" | "composite";
                strategy?: "long" | "short";
            };
        };
        responses: {
            /** Available strategy list for bot (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Black List for bot pairs (Permission: BOTS_READ, Security: SIGNED) */
    getVer1BotsPairsBlackList: {
        responses: {
            /** Black List for bot pairs (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Create or Update pairs BlackList for bots (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsUpdatePairsBlackList: {
        parameters: {
            formData: {
                pairs: string[];
            };
        };
        responses: {
            /** Create or Update pairs BlackList for bots (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Create bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsCreateBot: {
        parameters: {
            formData: {
                name: string;
                /** id from GET /ver1/accounts */
                account_id: number;
                /** Pass single pair to create SingleBot or any other number of pairs to create MultiBot */
                pairs: string[];
                max_active_deals?: number;
                /** Base order size */
                base_order_volume: number;
                /** base order volume currency */
                base_order_volume_type?: "quote_currency" | "base_currency" | "percent" | "xbt";
                /** Target profit(percentage) */
                take_profit: number;
                /** Safety trade size */
                safety_order_volume: number;
                /** safety order volume currency */
                safety_order_volume_type?: "quote_currency" | "base_currency" | "percent" | "xbt";
                martingale_volume_coefficient: number;
                martingale_step_coefficient: number;
                /** Max safety trades count */
                max_safety_orders: number;
                /** Max active safety trades count */
                active_safety_orders_count: number;
                stop_loss_percentage?: number;
                cooldown?: number;
                /** Enable trailing take profit. Binance only. */
                trailing_enabled?: boolean;
                /** required if trailing_enabled */
                trailing_deviation?: number;
                btc_price_limit?: number;
                strategy?: "short" | "long";
                /** Price deviation to open safety trades(percentage) */
                safety_order_step_percentage: number;
                /** Percentage: base – from base order, total – from total volume */
                take_profit_type: "base" | "total";
                /**
                 * For manual signals: [{"strategy":"manual"}] or []<br>
                 *                                                         For non-stop(1 pair only): [{"strategy":"nonstop"}]<br>
                 *                                                         QFL: {"options": {"type": "original"}, {"percent": 3}, "strategy": "qfl"}] <br>
                 *                                                         TradingView: [{"options": {"time": "5m", "type": "buy_or_strong_buy"}, "strategy": "trading_view"}
                 */
                strategy_list: unknown[];
                /** Used for Bitmex bots only */
                leverage_type?: "custom" | "cross" | "not_specified" | "isolated";
                /** required if leverage_type is isolated */
                leverage_custom_value?: number;
                /** minimum price to open deal */
                min_price?: number;
                /** maximum price to open deal */
                max_price?: number;
                stop_loss_timeout_enabled?: boolean;
                /** StopLoss timeout in seconds if StopLoss timeout enabled */
                stop_loss_timeout_in_seconds?: number;
                min_volume_btc_24h?: number;
                /** Enable trailing stop loss. Bitmex only. */
                tsl_enabled?: boolean;
                /** Deal start delay in seconds */
                deal_start_delay_seconds?: number;
                /** Take profit currency */
                profit_currency?: "quote_currency" | "base_currency";
                start_order_type?: "limit" | "market";
                stop_loss_type?: "stop_loss" | "stop_loss_and_disable_bot";
                /** Bot will be disabled after opening this number of deals */
                disable_after_deals_count?: number;
                /** Allow specific number of deals on the same pair. Multibot only. */
                allowed_deals_on_same_pair?: number;
                /** Close bot deals after given number of seconds. Must be greater than 60. */
                close_deals_timeout?: number;
            };
        };
        responses: {
            /** Create bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** User bots (Permission: BOTS_READ, Security: SIGNED) */
    getVer1Bots: {
        parameters: {
            query: {
                /** Limit records. Max: 100 */
                limit?: number;
                /** Offset records */
                offset?: number;
                /** Param for a filter by created date */
                from?: string;
                /** Account to show bots on. Return all if not specified. Gather this from GET /ver1/accounts */
                account_id?: number;
                scope?: "enabled" | "disabled";
                strategy?: "long" | "short";
                sort_by?: "profit" | "created_at" | "updated_at";
                sort_direction?: "asc" | "desc";
                /** Quote currency */
                quote?: string;
            };
        };
        responses: {
            /** User bots (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Get bot stats (Permission: BOTS_READ, Security: SIGNED) */
    getVer1BotsStats: {
        parameters: {
            query: {
                /** Account to show on. Null - show for all. Gather this from GET /ver1/accounts */
                account_id?: number;
                /** Bots to show on. Null - show for all */
                bot_id?: number;
            };
        };
        responses: {
            /** Get bot stats (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** POST /bots/:id/copy_and_create. Permission: BOTS_WRITE, Security: SIGNED */
    postVer1BotsBotIdCopyAndCreate: {
        parameters: {
            formData: {
                name: string;
                secret: string;
                /** Max amount for bot usage (Based on current rate) */
                amount?: number;
            };
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** POST /bots/:id/copy_and_create. Permission: BOTS_WRITE, Security: SIGNED */
            201: unknown;
        };
    };
    /** Edit bot (Permission: BOTS_WRITE, Security: SIGNED) */
    patchVer1BotsBotIdUpdate: {
        parameters: {
            formData: {
                name: string;
                pairs: string[];
                max_active_deals?: number;
                /** Base order size */
                base_order_volume: number;
                /** base order volume currency */
                base_order_volume_type?: "quote_currency" | "base_currency" | "percent" | "xbt";
                /** Target profit(percentage) */
                take_profit: number;
                /** Safety trade size */
                safety_order_volume: number;
                /** safety order volume currency */
                safety_order_volume_type?: "quote_currency" | "base_currency" | "percent" | "xbt";
                martingale_volume_coefficient: number;
                martingale_step_coefficient: number;
                /** Max safety trades count */
                max_safety_orders: number;
                /** Max active safety trades count */
                active_safety_orders_count: number;
                stop_loss_percentage?: number;
                cooldown?: number;
                /** Enable trailing take profit. Binance only. */
                trailing_enabled?: boolean;
                /** required if trailing_enabled */
                trailing_deviation?: number;
                btc_price_limit?: number;
                /** Price deviation to open safety trades(percentage) */
                safety_order_step_percentage: number;
                /** Percentage: base – from base order, total – from total volume */
                take_profit_type: "total" | "base";
                /**
                 * For manual signals: [{"strategy":"manual"}] or []<br>
                 *                                                         For non-stop(1 pair only): [{"strategy":"nonstop"}]<br>
                 *                                                         QFL: {"options": {"type": "original"}, {"percent": 3}, "strategy": "qfl"}] <br>
                 *                                                         TradingView: [{"options": {"time": "5m", "type": "buy_or_strong_buy", "strategy": "trading_view"}
                 */
                strategy_list: unknown[];
                /** Used for Bitmex bots only */
                leverage_type?: "custom" | "cross" | "not_specified" | "isolated";
                /** required if leverage_type is isolated */
                leverage_custom_value?: number;
                /** minimum price to open deal */
                min_price?: number;
                /** maximum price to open deal */
                max_price?: number;
                stop_loss_timeout_enabled?: boolean;
                /** StopLoss timeout in seconds if StopLoss timeout enabled */
                stop_loss_timeout_in_seconds?: number;
                min_volume_btc_24h?: number;
                /** Enable trailing stop loss. Bitmex only. */
                tsl_enabled?: boolean;
                /** Deal start delay in seconds */
                deal_start_delay_seconds?: number;
                /** Take profit currency */
                profit_currency?: "quote_currency" | "base_currency";
                start_order_type?: "limit" | "market";
                stop_loss_type?: "stop_loss" | "stop_loss_and_disable_bot";
                /** Bot will be disabled after opening this number of deals */
                disable_after_deals_count?: number;
                /** Allow specific number of deals on the same pair. Multibot only. */
                allowed_deals_on_same_pair?: number;
                /** Close bot deals after given number of seconds. Must be greater than 60. */
                close_deals_timeout?: number;
            };
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Edit bot (Permission: BOTS_WRITE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Disable bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsBotIdDisable: {
        parameters: {
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Disable bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Enable bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsBotIdEnable: {
        parameters: {
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Enable bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Start new deal asap (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsBotIdStartNewDeal: {
        parameters: {
            formData: {
                /** Can be omited for simple bot */
                pair?: string;
                /** If false or not specified then all paramaters like signals or volume filters will be checked. If true - those checks will be skipped */
                skip_signal_checks?: boolean;
                /** If true then you will be allowed to open more then one deal per pair in composite bot */
                skip_open_deals_checks?: boolean;
            };
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Start new deal asap (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Delete bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsBotIdDelete: {
        parameters: {
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Delete bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Panic sell all bot deals (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsBotIdPanicSellAllDeals: {
        parameters: {
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Panic sell all bot deals (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Cancel all bot deals (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1BotsBotIdCancelAllDeals: {
        parameters: {
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Cancel all bot deals (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Bot deals stats (Permission: BOTS_READ, Security: SIGNED) */
    getVer1BotsBotIdDealsStats: {
        parameters: {
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Bot deals stats (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Bot info (Permission: BOTS_READ, Security: SIGNED) */
    getVer1BotsBotIdShow: {
        parameters: {
            query: {
                include_events?: boolean;
            };
            path: {
                bot_id: number;
            };
        };
        responses: {
            /** Bot info (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** User deals (Permission: BOTS_READ, Security: SIGNED) */
    getVer1Deals: {
        parameters: {
            query: {
                /** Limit records. Max: 1_000 */
                limit?: number;
                /** Offset records */
                offset?: number;
                /** Param for a filter by created date */
                from?: string;
                /** Account to show bots on. Return all if not specified. Gather this from GET /ver1/accounts */
                account_id?: number;
                /** Bot show deals on. Return all if not specified */
                bot_id?: number;
                /** active - active deals, finished - finished deals, completed - successfully completed, cancelled - cancelled deals, failed - failed deals, any other value or null (default) - all deals */
                scope?: string;
                order?: "created_at" | "updated_at" | "closed_at" | "profit" | "profit_percentage";
                order_direction?: "asc" | "desc";
                /** Base currency */
                base?: string;
                /** Quote currency */
                quote?: string;
            };
        };
        responses: {
            /** User deals (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Convert to smart trade (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postVer1DealsDealIdConvertToSmartTrade: {
        parameters: {
            formData: {
                stop_bot?: boolean;
            };
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Convert to smart trade (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Update max safety orders (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1DealsDealIdUpdateMaxSafetyOrders: {
        parameters: {
            formData: {
                /** New maximum safety orders value */
                max_safety_orders: number;
            };
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Update max safety orders (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Panic sell deal (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1DealsDealIdPanicSell: {
        parameters: {
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Panic sell deal (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Cancel deal (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1DealsDealIdCancel: {
        parameters: {
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Cancel deal (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Update deal (Permission: BOTS_WRITE, Security: SIGNED) */
    patchVer1DealsDealIdUpdateDeal: {
        parameters: {
            formData: {
                /** New take profit value */
                take_profit?: number;
                profit_currency?: "quote_currency" | "base_currency";
                /** base – from base order, total – from total volume */
                take_profit_type?: string;
                trailing_enabled?: boolean;
                /** New trailing deviation value */
                trailing_deviation?: number;
                /** New stop loss percentage value */
                stop_loss_percentage?: number;
                /** New max safety orders value */
                max_safety_orders?: number;
                /** New active safety orders count value */
                active_safety_orders_count?: number;
                stop_loss_timeout_enabled?: boolean;
                /** StopLoss timeout in seconds if StopLoss timeout enabled */
                stop_loss_timeout_in_seconds?: number;
                /** Trailing stop loss enabled */
                tsl_enabled?: boolean;
                stop_loss_type?: "stop_loss" | "stop_loss_and_disable_bot";
                /** Close deal after given number of seconds. Must be greater than 60. */
                close_timeout?: number;
            };
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Update deal (Permission: BOTS_WRITE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** DEPRECATED, Update take profit condition. Deal status should be bought (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1DealsDealIdUpdateTp: {
        parameters: {
            formData: {
                /** New take profit value */
                new_take_profit_percentage: number;
            };
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** DEPRECATED, Update take profit condition. Deal status should be bought (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Info about specific deal (Permission: BOTS_READ, Security: SIGNED) */
    getVer1DealsDealIdShow: {
        parameters: {
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Info about specific deal (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Cancel manual safety orders (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1DealsDealIdCancelOrder: {
        parameters: {
            formData: {
                /** manual safety order id */
                order_id: string;
            };
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Cancel manual safety orders (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Deal safety orders (Permission: BOTS_READ, Security: SIGNED) */
    getVer1DealsDealIdMarketOrders: {
        parameters: {
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Deal safety orders (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Adding manual safety order (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1DealsDealIdAddFunds: {
        parameters: {
            formData: {
                /** safety order quantity */
                quantity: number;
                /** true - use MARKET order, false - use LIMIT order */
                is_market: boolean;
                response_type?: "empty" | "deal" | "market_order";
                /** safety order rate. Required if LIMIT order used */
                rate: number;
            };
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Adding manual safety order (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Info required to add funds correctly: available amounts, exchange limitations etc  (Permission: BOTS_READ, Security: SIGNED) */
    getVer1DealsDealIdDataForAddingFunds: {
        parameters: {
            path: {
                deal_id: number;
            };
        };
        responses: {
            /** Info required to add funds correctly: available amounts, exchange limitations etc  (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Current User Mode (Paper or Real) (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1UsersCurrentMode: {
        responses: {
            /** Current User Mode (Paper or Real) (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Change User Mode (Paper or Real) (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1UsersChangeMode: {
        parameters: {
            formData: {
                mode: "paper" | "real";
            };
        };
        responses: {
            /** Change User Mode (Paper or Real) (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Transfer coins between accounts (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1AccountsTransfer: {
        parameters: {
            formData: {
                /** Currency code(example: USDT) */
                currency: string;
                amount: number;
                /** Recipient account ID (possible values in /transfer_data) */
                to_account_id: number;
                /** Sender account ID (possible values in /transfer_data) */
                from_account_id: number;
            };
        };
        responses: {
            /** Transfer coins between accounts (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Transfers history (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1AccountsTransferHistory: {
        parameters: {
            query: {
                /** Sender or Recipient account ID (possible values in /transfer_data) */
                account_id: number;
                /** Currency code(example: USDT) */
                currency: string;
                /** Page number */
                page?: number;
                /** Elements per page */
                per_page?: number;
            };
        };
        responses: {
            /** Transfers history (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Data for transfer between accounts (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1AccountsTransferData: {
        responses: {
            /** Data for transfer between accounts (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Add exchange account  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1AccountsNew: {
        parameters: {
            formData: {
                /** check market_code in market_list method */
                type: string;
                /** Account name (any string) */
                name: string;
                /** Requires unless type = binance_dex */
                api_key?: string;
                /** Requires unless type = binance_dex */
                secret?: string;
                /** Requires if type = ethereumwallet */
                address?: string;
                /** For Bitstamp */
                customer_id?: string;
                /** For Coinbase Pro (GDAX) */
                passphrase?: string;
                /** For FTX */
                subaccount_name?: string;
                how_connect?: "mnemonic_phrase" | "keystore";
                /** keystore file content. Requires if type = binance_dex and how_connect = keystore */
                keystore?: unknown;
                /** Requires if type = binance_dex and how_connect = keystore */
                wallet_password?: string;
                /** Requires if type = binance_dex and how_connect = mnemonic_phrase */
                mnemonic_phrase?: string;
            };
        };
        responses: {
            /** Add exchange account  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Edit exchange account */
    postVer1AccountsUpdate: {
        parameters: {
            formData: {
                account_id: number;
                /** Account name (any string) */
                name?: string;
                api_key?: string;
                secret?: string;
                /** For Bitstamp */
                customer_id?: string;
                /** For Coinbase Pro (GDAX) */
                passphrase?: string;
                /** For FTX */
                subaccount_name?: string;
                /** For accounts with type = ethereumwallet */
                address?: string;
                how_connect?: "mnemonic_phrase" | "keystore";
                keystore?: unknown;
                wallet_password?: string;
                mnemonic_phrase?: string;
            };
        };
        responses: {
            /** Edit exchange account */
            201: unknown;
        };
    };
    /** User connected exchanges(and EthereumWallet) list (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1Accounts: {
        parameters: {
            query: {
                page?: number;
                /** Page size, from 1 to 100 */
                per_page?: number;
            };
        };
        responses: {
            /** User connected exchanges(and EthereumWallet) list (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Supported markets list (Permission: NONE, Security: NONE) */
    getVer1AccountsMarketList: {
        responses: {
            /** Supported markets list (Permission: NONE, Security: NONE) */
            200: unknown;
        };
    };
    /** All market pairs (Permission: NONE, Security: NONE) */
    getVer1AccountsMarketPairs: {
        parameters: {
            query: {
                /** deprecated. mandatory use market_code instead */
                pretty_display_type?: string;
                /** market_code from account model */
                market_code?: string;
            };
        };
        responses: {
            /** All market pairs (Permission: NONE, Security: NONE) */
            200: unknown;
        };
    };
    /** Currency rates and limits with leverage data (Permission: NONE, Security: NONE) */
    getVer1AccountsCurrencyRatesWithLeverageData: {
        parameters: {
            query: {
                /** market_code from account model */
                market_code: string;
                /** Pair */
                pair: string;
            };
        };
        responses: {
            /** Currency rates and limits with leverage data (Permission: NONE, Security: NONE) */
            200: unknown;
        };
    };
    /** Currency rates and limits (Permission: NONE, Security: NONE) */
    getVer1AccountsCurrencyRates: {
        parameters: {
            query: {
                /** Type of limits - bot or smart_trade */
                limit_type?: string;
                /** deprecated. use market_code instead */
                pretty_display_type?: string;
                /** market_code from account model. If you are retrieving data for pairs, you must also include market_code */
                market_code?: string;
                /** Pair */
                pair: string;
            };
        };
        responses: {
            /** Currency rates and limits (Permission: NONE, Security: NONE) */
            200: unknown;
        };
    };
    /** User Deposit Data (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1AccountsAccountIdDepositData: {
        parameters: {
            query: {
                currency: string;
                network: string;
            };
            path: {
                account_id: number;
            };
        };
        responses: {
            /** User Deposit Data (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Deposit/withdraw networks info (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1AccountsAccountIdNetworksInfo: {
        parameters: {
            query: {
                /** Filter currencies with deposit/withdraw enabled */
                purpose?: "deposit" | "withdraw";
            };
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Deposit/withdraw networks info (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Convert dust coins to BNB (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1AccountsAccountIdConvertDustToBnb: {
        parameters: {
            formData: {
                /** Array of currency codes */
                codes?: string[];
            };
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Convert dust coins to BNB (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Active trade entities (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1AccountsAccountIdActiveTradingEntities: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Active trade entities (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Sell all to USD  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1AccountsAccountIdSellAllToUsd: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Sell all to USD  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Sell all to BTC  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1AccountsAccountIdSellAllToBtc: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Sell all to BTC  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** balance history data (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1AccountsAccountIdBalanceChartData: {
        parameters: {
            query: {
                date_from: string;
                date_to?: string;
            };
            path: {
                account_id: number;
            };
        };
        responses: {
            /** balance history data (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Load balances for specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED) */
    postVer1AccountsAccountIdLoadBalances: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Load balances for specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Rename exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1AccountsAccountIdRename: {
        parameters: {
            formData: {
                name: string;
            };
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Rename exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Information about all user balances on specified exchange in pretty for pie chart format (Permission: ACCOUNTS_READ, Security: SIGNED) */
    postVer1AccountsAccountIdPieChartData: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Information about all user balances on specified exchange in pretty for pie chart format (Permission: ACCOUNTS_READ, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Information about all user balances on specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED) */
    postVer1AccountsAccountIdAccountTableData: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Information about all user balances on specified exchange  (Permission: ACCOUNTS_READ, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Remove exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1AccountsAccountIdRemove: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Remove exchange connection  (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Information about account leverage (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1AccountsAccountIdLeverageData: {
        parameters: {
            query: {
                pair: string;
            };
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Information about account leverage (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /**
     * Single Account Info (Permission: ACCOUNTS_READ, Security: SIGNED)
     * You can send 'summary' instead of {account_id} to get summary account info
     */
    getVer1AccountsAccountId: {
        parameters: {
            path: {
                account_id: number;
            };
        };
        responses: {
            /**
             * Single Account Info (Permission: ACCOUNTS_READ, Security: SIGNED)
             * You can send 'summary' instead of {account_id} to get summary account info
             */
            200: unknown;
        };
    };
    /** Marketplace presets (Permission: NONE, Security: SIGNED) */
    getVer1MarketplacePresets: {
        parameters: {
            query: {
                profit_per_day_from?: number;
                profit_per_day_to?: number;
                profit_per_month_from?: number;
                profit_per_month_to?: number;
                with_all_market_pairs?: boolean;
                days_running_from?: number;
                days_running_to?: number;
                bot_type?: string;
                bot_strategy?: string;
                cmc?: string;
                sort_by?: string;
                sort_direction?: "asc" | "desc";
                page?: number;
                per_page?: number;
            };
            formData: {
                account_types?: string[];
                markets?: string[];
                pairs?: string[];
                deal_start_conditions?: string[];
            };
        };
        responses: {
            /** Marketplace presets (Permission: NONE, Security: SIGNED) */
            200: {
                schema: definitions["IndexEntity"];
            };
        };
    };
    /** All marketplace items (Permission: NONE, Security: NONE) */
    getVer1MarketplaceItems: {
        parameters: {
            query: {
                /** Limit records. Max: 1_000 */
                limit?: number;
                /** Offset records */
                offset?: number;
                /** paid - show only paid signal providers. free - show only free signal providers */
                scope?: "all" | "paid" | "free";
                order?: "subscribers" | "name" | "newest";
                locale?: "en" | "ru" | "zh" | "zh-CN" | "es" | "pt" | "ko" | "fr" | "cs" | "tr" | "de";
            };
        };
        responses: {
            /** All marketplace items (Permission: NONE, Security: NONE) */
            200: unknown;
        };
    };
    /** Marketplace Item Signals (Permission: NONE, Security: NONE) */
    getVer1MarketplaceItemIdSignals: {
        parameters: {
            query: {
                /** Limit records. Max: 1_000 */
                limit?: number;
                /** Offset records */
                offset?: number;
                order?: "pair" | "exchange" | "signal_type" | "date";
                order_direction?: "asc" | "desc";
                locale?: "en" | "ru" | "zh" | "zh-CN" | "es" | "pt" | "ko" | "fr" | "cs" | "tr" | "de";
            };
            path: {
                item_id: number;
            };
        };
        responses: {
            /** Marketplace Item Signals (Permission: NONE, Security: NONE) */
            200: unknown;
        };
    };
    /** Create AI Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1GridBotsAi: {
        parameters: {
            formData: {
                /** Grid Bot's name */
                name?: string;
                /** id from GET /ver1/accounts */
                account_id: number;
                pair: string;
                total_quantity: number;
                /** Leverage type for futures accounts */
                leverage_type?: "custom" | "cross" | "not_specified" | "isolated";
                /** Required if leverage_type = 'isolated' */
                leverage_custom_value?: number;
            };
        };
        responses: {
            /** Create AI Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Create Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1GridBotsManual: {
        parameters: {
            formData: {
                /** Grid Bot's name */
                name?: string;
                /** id from GET /ver1/accounts */
                account_id: number;
                pair: string;
                upper_price: number;
                lower_price: number;
                quantity_per_grid: number;
                grids_quantity: number;
                upper_stop_loss_price?: number;
                upper_stop_loss_enabled?: boolean;
                upper_stop_loss_action?: "stop_bot" | "stop_bot_and_buy" | "stop_bot_and_sell" | "stop_bot_and_close_position";
                lower_stop_loss_price?: number;
                lower_stop_loss_enabled?: boolean;
                lower_stop_loss_action?: "stop_bot" | "stop_bot_and_buy" | "stop_bot_and_sell" | "stop_bot_and_close_position";
                /** Leverage type for futures accounts */
                leverage_type?: "custom" | "cross" | "not_specified" | "isolated";
                /** Required if leverage_type = 'isolated' */
                leverage_custom_value?: number;
                /** Turn on or off grid_bot after creation */
                is_enabled?: boolean;
            };
        };
        responses: {
            /** Create Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Get AI settings (Permission: BOTS_READ, Security: SIGNED) */
    getVer1GridBotsAiSettings: {
        parameters: {
            query: {
                pair: string;
                /** Market code from /accounts/market_list */
                market_code: string;
            };
        };
        responses: {
            /** Get AI settings (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Grid bots list (Permission: BOTS_READ, Security: SIGNED) */
    getVer1GridBots: {
        parameters: {
            formData: {
                /** Filter by account id */
                account_ids?: number[];
                /** Filter by account type */
                account_types?: string[];
            };
            query: {
                /** Filter by bot state */
                state?: "enabled" | "disabled";
                /** Sort column */
                sort_by?: "current_profit" | "profit" | "bot_id" | "pair" | "created_at" | "updated_at";
                /** Sort direction */
                sort_direction?: "desc" | "asc";
                limit?: number;
                offset?: number;
                /** Param for a filter by created date */
                from?: string;
                /** Base currency */
                base?: string;
                /** Quote currency */
                quote?: string;
            };
        };
        responses: {
            /** Grid bots list (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Grid Bot Market Orders (Permission: BOTS_READ, Security: SIGNED) */
    getVer1GridBotsIdMarketOrders: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Grid Bot Market Orders (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Grid Bot Profits (Permission: BOTS_READ, Security: SIGNED) */
    getVer1GridBotsIdProfits: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Grid Bot Profits (Permission: BOTS_READ, Security: SIGNED) */
            200: {
                schema: definitions["GridBotProfitsEntity"];
            };
        };
    };
    /** Edit Grid Bot (AI) (Permission: BOTS_WRITE, Security: SIGNED) */
    patchVer1GridBotsIdAi: {
        parameters: {
            formData: {
                /** Grid Bot's name */
                name?: string;
                pair: string;
                total_quantity: number;
                /** Leverage type for futures accounts */
                leverage_type?: "custom" | "cross" | "not_specified" | "isolated";
                /** Required if leverage_type = 'isolated' */
                leverage_custom_value?: number;
            };
            path: {
                id: number;
            };
        };
        responses: {
            /** Edit Grid Bot (AI) (Permission: BOTS_WRITE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Edit Grid Bot (Manual) (Permission: BOTS_WRITE, Security: SIGNED) */
    patchVer1GridBotsIdManual: {
        parameters: {
            formData: {
                /** Grid Bot's name */
                name?: string;
                pair: string;
                upper_price: number;
                lower_price: number;
                quantity_per_grid: number;
                grids_quantity: number;
                upper_stop_loss_price?: number;
                upper_stop_loss_enabled?: boolean;
                upper_stop_loss_action?: "stop_bot" | "stop_bot_and_buy" | "stop_bot_and_sell" | "stop_bot_and_close_position";
                lower_stop_loss_price?: number;
                lower_stop_loss_enabled?: boolean;
                lower_stop_loss_action?: "stop_bot" | "stop_bot_and_buy" | "stop_bot_and_sell" | "stop_bot_and_close_position";
                /** Leverage type for futures accounts */
                leverage_type?: "custom" | "cross" | "not_specified" | "isolated";
                /** Required if leverage_type = 'isolated' */
                leverage_custom_value?: number;
            };
            path: {
                id: number;
            };
        };
        responses: {
            /** Edit Grid Bot (Manual) (Permission: BOTS_WRITE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Show Grid Bot (Permission: BOTS_READ, Security: SIGNED) */
    getVer1GridBotsId: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Show Grid Bot (Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Delete Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
    deleteVer1GridBotsId: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Delete Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
            204: never;
        };
    };
    /** Disable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1GridBotsIdDisable: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Disable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Enable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
    postVer1GridBotsIdEnable: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Enable Grid Bot (Permission: BOTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Get required balances to start bot(Permission: BOTS_READ, Security: SIGNED) */
    getVer1GridBotsIdRequiredBalances: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Get required balances to start bot(Permission: BOTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Create Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    postVer1LooseAccounts: {
        parameters: {
            formData: {
                name: string;
                "tokens[code]": string[];
                "tokens[amount]": number[];
            };
        };
        responses: {
            /** Create Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Available currencies (Permission: ACCOUNTS_READ, Security: SIGNED) */
    getVer1LooseAccountsAvailableCurrencies: {
        parameters: {
            query: {
                contains?: string;
                limit?: number;
                offset?: number;
            };
        };
        responses: {
            /** Available currencies (Permission: ACCOUNTS_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Update Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
    putVer1LooseAccountsAccountId: {
        parameters: {
            formData: {
                name?: string;
                "tokens[code]": string[];
                "tokens[amount]": number[];
            };
            path: {
                account_id: number;
            };
        };
        responses: {
            /** Update Loose Account (Permission: ACCOUNTS_WRITE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Test connectivity to the Rest API (Permission: NONE, Security: NONE) */
    getVer1Ping: {
        responses: {
            /** Test connectivity to the Rest API (Permission: NONE, Security: NONE) */
            200: {
                schema: definitions["PongEntity"];
            };
        };
    };
    /** Test connectivity to the Rest API and get the current server time (Permission: NONE, Security: NONE) */
    getVer1Time: {
        responses: {
            /** Test connectivity to the Rest API and get the current server time (Permission: NONE, Security: NONE) */
            200: {
                schema: definitions["TimeEntity"];
            };
        };
    };
    /** Get smart trade history (Permission: SMART_TRADE_READ, Security: SIGNED) */
    getV2SmartTrades: {
        parameters: {
            query: {
                account_id?: number;
                pair?: string;
                type?: "simple_buy" | "simple_sell" | "smart_sell" | "smart_trade" | "smart_cover" | "smart_buy";
                page?: number;
                per_page?: number;
                status?: "all" | "active" | "finished" | "successfully_finished" | "cancelled" | "failed";
                order_by?: "created_at" | "updated_at" | "closed_at" | "status" | "profit" | "profit_percentage";
                order_direction?: "asc" | "desc";
                /** Param for a filter by created date */
                from?: string;
                /** Base currency */
                base?: string;
                /** Quote currency */
                quote?: string;
            };
        };
        responses: {
            /** Get smart trade history (Permission: SMART_TRADE_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Create smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTrades: {
        parameters: {
            formData: {
                /** id from GET /ver1/accounts */
                account_id: number;
                pair: string;
                /** true for Simple Buy and Simple Sell */
                instant?: boolean;
                /** true only for Smart Sell */
                skip_enter_step?: boolean;
                note?: string;
                "leverage[enabled]": boolean;
                "leverage[type]"?: "custom" | "cross" | "isolated";
                /** Cross leverage value */
                "leverage[value]"?: number;
                "position[type]": "buy" | "sell";
                "position[order_type]": "market" | "limit" | "conditional";
                /** Amount of units to buy */
                "position[units][value]": number;
                /** Price for limit order */
                "position[price][value]": number;
                /** Conditional trigger price */
                "position[conditional][price][value]": number;
                /** By default ask for long, bid for short */
                "position[conditional][price][type]"?: "bid" | "ask" | "last";
                "position[conditional][order_type]": "market" | "limit";
                "position[conditional][trailing][enabled]": boolean;
                /** Should be 100% in the sum of all steps */
                "position[conditional][trailing][percent]": number;
                "take_profit[enabled]": boolean;
                /** market, limit */
                "take_profit[steps][][order_type]": ("market" | "limit")[];
                "take_profit[steps][][volume]": number[];
                /** bid, ask, last */
                "take_profit[steps][][price][type]": string[];
                /** only if position has no trailing or position trailing is finished */
                "take_profit[steps][][price][value]"?: string[];
                /** only if position has trailing and position trailing is not finished */
                "take_profit[steps][][price][percent]"?: string[];
                "take_profit[steps][][trailing][enabled]": string[];
                "take_profit[steps][][trailing][percent]": string[];
                "stop_loss[enabled]": boolean;
                "stop_loss[breakeven]"?: boolean;
                "stop_loss[order_type]": "market" | "limit";
                /** Price for limit order */
                "stop_loss[price][value]": number;
                "stop_loss[conditional][price][type]": "bid" | "ask" | "last";
                /** if position has no trailing or position trailing is finished */
                "stop_loss[conditional][price][value]"?: number;
                /** only if position has trailing and position trailing is not finished */
                "stop_loss[conditional][price][percent]"?: number;
                "stop_loss[conditional][trailing][enabled]": boolean;
                "stop_loss[timeout][enabled]": boolean;
                "stop_loss[timeout][value]": number;
            };
        };
        responses: {
            /** Create smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Get smart trade v2 by id (Permission: SMART_TRADE_READ, Security: SIGNED) */
    getV2SmartTradesId: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Get smart trade v2 by id (Permission: SMART_TRADE_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Cancel smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    deleteV2SmartTradesId: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Cancel smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            204: never;
        };
    };
    /** Update smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    patchV2SmartTradesId: {
        parameters: {
            formData: {
                "leverage[enabled]": boolean;
                "leverage[type]"?: "custom" | "cross" | "isolated";
                /** Cross leverage value */
                "leverage[value]"?: number;
                /** Amount of units to buy */
                "position[units][value]": number;
                /** Price for limit order */
                "position[price][value]": number;
                /** Conditional trigger price */
                "position[conditional][price][value]": number;
                /** By default ask for long, bid for short */
                "position[conditional][price][type]"?: "bid" | "ask" | "last";
                "position[conditional][order_type]": "market" | "limit";
                "position[conditional][trailing][enabled]": boolean;
                "position[conditional][trailing][percent]": number;
                "take_profit[enabled]": boolean;
                "take_profit[steps][][order_type]": ("market" | "limit")[];
                "take_profit[steps][][volume]": number[];
                "take_profit[steps][][price][type]": string[];
                "take_profit[steps][][price][value]"?: string[];
                "take_profit[steps][][price][percent]"?: string[];
                "take_profit[steps][][trailing][enabled]": string[];
                "take_profit[steps][][trailing][percent]": string[];
                "stop_loss[enabled]": boolean;
                "stop_loss[breakeven]"?: boolean;
                "stop_loss[order_type]": "market" | "limit";
                /** Price for limit order */
                "stop_loss[price][value]": number;
                "stop_loss[conditional][price][type]": "bid" | "ask" | "last";
                /** Trigger price */
                "stop_loss[conditional][price][value]"?: number;
                "stop_loss[conditional][price][percent]"?: number;
                "stop_loss[conditional][trailing][enabled]": boolean;
                "stop_loss[timeout][enabled]": boolean;
                "stop_loss[timeout][value]": number;
            };
            path: {
                id: number;
            };
        };
        responses: {
            /** Update smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Reduce funds for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTradesIdReduceFunds: {
        parameters: {
            formData: {
                order_type: "market" | "limit";
                /** Amount of units to buy */
                "units[value]": number;
                /** Price for limit order */
                "price[value]": number;
            };
            path: {
                id: number;
            };
        };
        responses: {
            /** Reduce funds for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Average for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTradesIdAddFunds: {
        parameters: {
            formData: {
                order_type: "market" | "limit";
                /** Amount of units to buy */
                "units[value]": number;
                /** Price for limit order */
                "price[value]": number;
            };
            path: {
                id: number;
            };
        };
        responses: {
            /** Average for smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Close by market smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTradesIdCloseByMarket: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Close by market smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Force start smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTradesIdForceStart: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Force start smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Process smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTradesIdForceProcess: {
        parameters: {
            path: {
                id: number;
            };
        };
        responses: {
            /** Process smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Set note to smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTradesIdSetNote: {
        parameters: {
            formData: {
                note: string;
            };
            path: {
                id: number;
            };
        };
        responses: {
            /** Set note to smart trade v2 (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Get smart trade v2 trades (Permission: SMART_TRADE_READ, Security: SIGNED) */
    getV2SmartTradesSmartTradeIdTrades: {
        parameters: {
            path: {
                smart_trade_id: number;
            };
        };
        responses: {
            /** Get smart trade v2 trades (Permission: SMART_TRADE_READ, Security: SIGNED) */
            200: unknown;
        };
    };
    /** Panic close trade by market (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    postV2SmartTradesSmartTradeIdTradesIdCloseByMarket: {
        parameters: {
            path: {
                smart_trade_id: number;
                id: number;
            };
        };
        responses: {
            /** Panic close trade by market (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            201: unknown;
        };
    };
    /** Cancel trade (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
    deleteV2SmartTradesSmartTradeIdTradesId: {
        parameters: {
            path: {
                smart_trade_id: number;
                id: number;
            };
        };
        responses: {
            /** Cancel trade (Permission: SMART_TRADE_WRITE, Security: SIGNED) */
            204: never;
        };
    };
}
export interface external {
}
